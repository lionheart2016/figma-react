import{useCallback as e}from"react";import{by as a,aY as t,u as n,w as s,i as r,bt as o,bs as c,bp as i,bz as l}from"./privy-provider-BG8GtKO6.mjs";import{getAssociatedTokenAddressSync as d,createAssociatedTokenAccountIdempotentInstruction as m,createTransferInstruction as u}from"@solana/spl-token";import{Connection as p,PublicKey as w,Transaction as f,SystemProgram as h,TransactionInstruction as k,VersionedTransaction as y,TransactionMessage as g}from"@solana/web3.js";import{getSolanaRpcEndpointForCluster as b,SolanaClient as B}from"@privy-io/js-sdk-core";import{u as T}from"./internal-context-qdNgTV5f.mjs";var S={id:a,getBalance:({address:e,cluster:a})=>new p(b(a)).getBalance(new w(e)),getTokenBalance:async({address:e,cluster:a,mintAddress:t})=>await new B({...a,rpcUrl:b(a)}).getTokenAccountsByOwner(e,t)||{amount:BigInt(0),decimals:9},createTransferTransaction:async({from:e,to:a,amount:t,cluster:n})=>{let s=new w(e),r=new f;r.add(h.transfer({fromPubkey:s,toPubkey:new w(a),lamports:t}));let o=new p(b(n)),c=await o.getLatestBlockhash();return r.recentBlockhash=c.blockhash,r.feePayer=s,{transaction:r,connection:o}},createSplTransferTransaction:async({from:e,to:a,amount:t,cluster:n,mintAddress:s})=>{let r=new w(s),o=new w(e),c=new w(a),i=new f,l=d(r,o),h=d(r,c);i.add(m(o,h,c,r)),i.add(u(l,h,o,t));let k=new p(b(n)),y=await k.getLatestBlockhash();return i.recentBlockhash=y.blockhash,i.feePayer=o,{transaction:i,connection:k}},createBridgeTransactionFromRelayQuote:async({quote:e,from:a,cluster:n})=>{let s=e.steps[0]?.items?.[0];if(!s)return;let r=s.data.instructions.map((({keys:e,programId:a,data:n})=>new k({keys:e.map((({pubkey:e,isSigner:a,isWritable:t})=>({pubkey:new w(e),isSigner:a,isWritable:t}))),programId:new w(a),data:t(n,"hex")}))),o=s.data.addressLookupTableAddresses?.map((e=>new w(e))),c=new p(b(n)),i=await Promise.all((o??[]).map((async e=>c.getAddressLookupTable(e).then((e=>e.value))))),{blockhash:l}=await c.getLatestBlockhash();return{transaction:new y(new g({payerKey:new w(a),instructions:r,recentBlockhash:l}).compileToV0Message(i)),connection:c}}};const v=a=>{n("fundSolanaWallet",a);let t=s(),{setModalData:d}=r(),{openModal:m}=T();return o(S),{fundWallet:e((async(e,a)=>{d({funding:c({address:e,appConfig:t,fundWalletConfig:a,methodScreen:i,externalSolanaFundingScreen:l})}),m(i)}),[t,d,m])}};export{S as t,v as u};
